BUILD_FILE_CONTENT = """# This file was automatically generated by rules_conda
package(default_visibility = ["//visibility:public"])

load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")

py_runtime(
    name = "python_runtime",
    files = glob(["{env_path}/**/*"], exclude_directories = 0),
    interpreter = "{env_path}/bin/python",
    python_version = "PY{py_major}"
)
"""


# create new local conda environment from file
def _create_environment(repository_ctx, executable, env_name):
    repository_ctx.report_progress("Creating conda environment")
    
    # path to env file as string
    env_file = str(repository_ctx.path(repository_ctx.attr.environment))
    
    args = [executable, "env", "create", "-f", env_file, "-p", "./{}".format(env_name)]
    
    result = repository_ctx.execute(args, quiet=repository_ctx.attr.quiet)
    if result.return_code:
        fail("Failure creating environment.\n{}\n{}".format(result.stdout, result.stderr))


# check if python2 or python3 has been installed
def _get_py_major(repository_ctx, env_name):
    if repository_ctx.path("{}/bin/python3".format(env_name)).exists:
        return 3
    return 2


# create BUILD file with py_runtime
def _create_env_build_file(repository_ctx, env_name):
    py_major = _get_py_major(repository_ctx, env_name)
    repository_ctx.file(
        "BUILD",
        content = BUILD_FILE_CONTENT.format(env_path=env_name, py_major=py_major)
    )


def _conda_create_impl(repository_ctx):
    executable = str(repository_ctx.path(repository_ctx.attr.conda))
    env_name = repository_ctx.name
    _create_environment(repository_ctx, executable, env_name)
    _create_env_build_file(repository_ctx, env_name)


conda_create_rule = repository_rule(
    _conda_create_impl,
    attrs = {
        "conda": attr.label(mandatory=True),
        "environment": attr.label(
            mandatory = True,
            allow_single_file = True,
            doc = "The label of the environment.yml file.",
        ),
        "quiet": attr.bool(
            default = True,
            doc = "False if conda output should be shown"
        )
    }
)