### RULES_PYTHON ###

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

RULES_PYTHON_NAME = "rules_python"
RULES_PYTHON_TAG = "0.0.2"
RULES_PYTHON_PREFIX = "%s-%s" % (RULES_PYTHON_NAME, RULES_PYTHON_TAG)
RULES_PYTHON_SHA = "a0480851566fc9c20a532d0dd6e21f03c95db5d1a167304d728aa52ebc820d26"
RULES_PYTHON_REPO = "bazelbuild"
RULES_PYTHON_ARCHIVE = "zip"
RULES_PYTHON_URL = "https://github.com/%s/%s/archive/%s.%s" % (RULES_PYTHON_REPO, RULES_PYTHON_NAME, RULES_PYTHON_TAG, RULES_PYTHON_ARCHIVE)

# use http_archive rule to load rules_python repo
http_archive(
    name = RULES_PYTHON_NAME,
    strip_prefix = RULES_PYTHON_PREFIX,
    sha256 = RULES_PYTHON_SHA,
    url = RULES_PYTHON_URL
)

### RULES_CONDA ###

# load local repository
# in a real world, you would rather download it with http_archive, like in rules_python above
local_repository(
    name = "rules_conda",
    path = "../",
)

load("@rules_conda//:defs.bzl", "load_conda", "conda_create", "register_toolchain")

# download and install conda
load_conda()

# create conda environment with python2
conda_create(
    name = "py2_env",
    environment = "@//:py2_environment.yml"
)

# create conda environment with python2
conda_create(
    name = "py3_env",
    environment = "@//:py3_environment.yml"
)

# register python binaries from environments as toolchain
register_toolchain(
    py2_env = "py2_env",  # optional
    py3_env = "py3_env"
)